/******************************************************************************/
/****         Generated by IBExpert 2008.08.08 2014/7/24 12:16:01          ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES GB_2312;


/******************************************************************************/
/****                               Domains                                ****/
/******************************************************************************/

CREATE DOMAIN D_MONEY AS
NUMERIC(18,2);

CREATE DOMAIN D_WEIGHT AS
NUMERIC(18,3);



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR T_ADMIN_GEN;
SET GENERATOR T_ADMIN_GEN TO 1;

CREATE GENERATOR T_CHECK_GOODS_GEN;
SET GENERATOR T_CHECK_GOODS_GEN TO 1;

CREATE GENERATOR T_CHECK_LIST_GEN;
SET GENERATOR T_CHECK_LIST_GEN TO 1;

CREATE GENERATOR T_DUTY_GEN;
SET GENERATOR T_DUTY_GEN TO 1;

CREATE GENERATOR T_GOODS_GEN;
SET GENERATOR T_GOODS_GEN TO 1;

CREATE GENERATOR T_GOODTYPE_GEN;
SET GENERATOR T_GOODTYPE_GEN TO 1;

CREATE GENERATOR T_INCOMING_GOODS_GEN;
SET GENERATOR T_INCOMING_GOODS_GEN TO 1;

CREATE GENERATOR T_INCOMING_LIST_GEN;
SET GENERATOR T_INCOMING_LIST_GEN TO 1;

CREATE GENERATOR T_INOUT_ITEMS_GEN;
SET GENERATOR T_INOUT_ITEMS_GEN TO 1;

CREATE GENERATOR T_ORDER_GOODS_GEN;
SET GENERATOR T_ORDER_GOODS_GEN TO 1;

CREATE GENERATOR T_ORDER_LIST_GEN;
SET GENERATOR T_ORDER_LIST_GEN TO 1;

CREATE GENERATOR T_USER_GEN;
SET GENERATOR T_USER_GEN TO 1;

CREATE GENERATOR T_CHANGEPRICE_GOODS_GEN;
SET GENERATOR T_CHANGEPRICE_GOODS_GEN TO 1;

CREATE GENERATOR T_CHANGEPRICE_LIST_GEN;
SET GENERATOR T_CHANGEPRICE_LIST_GEN TO 1;



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE T_ADMIN (
    IDX     INTEGER NOT NULL,
    NAME    VARCHAR(64),
    PWD     VARCHAR(255),
    ULEVEL  SMALLINT,
    DESP    VARCHAR(255)
);


CREATE TABLE T_AUDIT_GOODS (
    AUDITTIME       TIMESTAMP NOT NULL,
    NAME1           VARCHAR(255),
    NAME2           VARCHAR(255),
    COST1           D_MONEY NOT NULL,
    COST2           D_MONEY NOT NULL,
    GOODNUMBER1     D_WEIGHT,
    GOODNUMBER2     D_WEIGHT
);


CREATE TABLE T_CHANGEPRICE_GOODS (
    IDX         INTEGER NOT NULL,
    GOODIDX     INTEGER NOT NULL,
    LISTIDX     INTEGER NOT NULL,
    CHANGETIME  TIMESTAMP DEFAULT 'NOW',
    OLDPRICE    D_MONEY,
    NEWPRICE    D_MONEY
);


CREATE TABLE T_CHANGEPRICE_LIST (
    IDX          INTEGER NOT NULL,
    CHANGEDATE   DATE DEFAULT CURRENT_TIME,
    NAME         VARCHAR(255),
    TOTALNUMBER  INTEGER,
    DESP         VARCHAR(1024)
);


CREATE TABLE T_CHECK_GOODS (
    IDX                INTEGER NOT NULL,
    CHECKIDX           INTEGER NOT NULL,
    GOODIDX            INTEGER NOT NULL,
    DIFFERENCE         INTEGER NOT NULL,
    RESPONSIBLEPEOPLE  VARCHAR(255) DEFAULT 'NOW',
    ERRORSTEP          VARCHAR(255),
    REASON             VARCHAR(255),
    DESP               VARCHAR(1024),
    STOCKNUMBER        D_WEIGHT,
    NUMBER             D_WEIGHT
);


CREATE TABLE T_CHECK_LIST (
    IDX        INTEGER NOT NULL,
    CHECKDATE  DATE DEFAULT current_date,
    DESP       VARCHAR(255),
    TOTALDIFF  D_MONEY
);


CREATE TABLE T_CONST (
    IDX  INTEGER NOT NULL,
    VAL  VARCHAR(255)
);


CREATE TABLE T_DUTY (
    IDX         INTEGER NOT NULL,
    USERNAME    VARCHAR(64),
    DUTYDATE    DATE,
    LOGINTIME   TIME,
    LOGOUTTIME  TIME
);


CREATE TABLE T_GOODS (
    IDX            INTEGER NOT NULL,
    TYPEIDX        INTEGER DEFAULT 0,
    BARCODE        VARCHAR(13) NOT NULL,
    NAME           VARCHAR(255) NOT NULL,
    GOODCODE       VARCHAR(255) NOT NULL,
    COST           D_MONEY NOT NULL,
    GOODNUMBER     D_WEIGHT DEFAULT 1 NOT NULL,
    LABELPRICE     D_MONEY,
    LOWESTPRICE    D_MONEY,
    LABELPRINTED   SMALLINT DEFAULT false,
    DESP           VARCHAR(1024),
    IMAGE          BLOB SUB_TYPE 0 SEGMENT SIZE 8192 DEFAULT NULL,
    GOODTYPE       SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE T_GOODS_OLD (
    IDX            INTEGER NOT NULL,
    TYPEIDX        INTEGER DEFAULT 0,
    BARCODE        VARCHAR(13) NOT NULL,
    NAME           VARCHAR(255) NOT NULL,
    GOODCODE       VARCHAR(255) NOT NULL,
    COST           D_MONEY NOT NULL,
    GOODNUMBER     D_WEIGHT DEFAULT 1 NOT NULL,
    LABELPRICE     D_MONEY,
    LOWESTPRICE    D_MONEY,
    LABELPRINTED   SMALLINT DEFAULT false,
    DESP           VARCHAR(1024),
    IMAGE          BLOB SUB_TYPE 0 SEGMENT SIZE 8192 DEFAULT NULL,
    GOODTYPE       SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE T_GOODTYPE (
    IDX   INTEGER NOT NULL,
    PID   INTEGER DEFAULT 0 NOT NULL,
    NAME  VARCHAR(255) NOT NULL
);


CREATE TABLE T_INCOMING_GOODS (
    IDX           INTEGER NOT NULL,
    GOODIDX       INTEGER NOT NULL,
    LISTIDX       INTEGER NOT NULL,
    INCOMINGTIME  TIMESTAMP DEFAULT 'NOW',
    GOODNUMBER    D_WEIGHT,
	COST          D_MONEY
);


CREATE TABLE T_INCOMING_LIST (
    IDX           INTEGER NOT NULL,
    INCOMINGDATE  DATE DEFAULT CURRENT_DATE,
    NAME          VARCHAR(255),
    TOTALCOST     D_MONEY,
    TOTALNUMBER   D_WEIGHT,
    DESP          VARCHAR(1024)
);


CREATE TABLE T_INOUT_ITEMS (
    IDX           INTEGER NOT NULL,
    ORDERLISTIDX  INTEGER NOT NULL,
    INOUT         SMALLINT NOT NULL,
    NAME          VARCHAR(255),
    COST          D_MONEY DEFAULT 0
);


CREATE TABLE T_ORDER_GOODS (
    IDX           INTEGER NOT NULL,
    ORDERLISTIDX  INTEGER NOT NULL,
    GOODIDX       INTEGER NOT NULL,
    COUNTS        D_WEIGHT,
    PRICE         D_MONEY NOT NULL,
    COST          D_MONEY,
    PROFIT        D_MONEY,
    SELLTIME      TIMESTAMP DEFAULT 'NOW',
    CANCELDATE    DATE DEFAULT NULL
);


CREATE TABLE T_ORDER_LIST (
    IDX             INTEGER NOT NULL,
    ORDERDATE       DATE DEFAULT current_date NOT NULL,
    TOTALCHANGE     D_MONEY DEFAULT 0,
    TOTALCASH       D_MONEY DEFAULT 0,
    TOTALCOST       D_MONEY DEFAULT 0,
    TOTALPRICE      D_MONEY DEFAULT 0,
    TOTALPROFIT     D_MONEY DEFAULT 0,
    TOTALSELLNUM    D_WEIGHT DEFAULT 0,
    TOTALCANCELNUM  D_WEIGHT DEFAULT 0,
    DESP            VARCHAR(255),
    TOTALINCOME     D_MONEY DEFAULT 0,
    TOTALEXPENSES   D_MONEY DEFAULT 0,
    BANKSAVE        D_MONEY DEFAULT 0
);


CREATE TABLE T_PROVIDER (
    IDX       INTEGER NOT NULL,
    NAME      VARCHAR(64),
    ADDRESS   VARCHAR(255),
    PHONE     VARCHAR(255),
    CONTACTS  VARCHAR(255),
    DESP      VARCHAR(255)
);


CREATE TABLE T_USER (
    IDX     INTEGER NOT NULL,
    SERIAL  VARCHAR(32),
    NAME    VARCHAR(64),
    DESP    VARCHAR(255)
);


CREATE TABLE TMP_CHANGEPRICE_GOODS (
    IDX         INTEGER NOT NULL,
    GOODIDX     INTEGER NOT NULL,
    LISTIDX     INTEGER NOT NULL,
    CHANGETIME  TIMESTAMP DEFAULT 'NOW',
    OLDPRICE    NUMERIC(18,2),
    NEWPRICE    NUMERIC(18,2),
    BARCODE     VARCHAR(255),
    NAME        VARCHAR(255)
);


CREATE TABLE TMP_CHECK_GOODS (
    GOODIDX  INTEGER NOT NULL,
    NUMBER   D_WEIGHT DEFAULT 0,
    CHECKED  INTEGER DEFAULT 0,
    REASON   VARCHAR(255),
    DESP     VARCHAR(1024)
);




/******************************************************************************/
/****                                Views                                 ****/
/******************************************************************************/


/* View: V_GOODS */
CREATE VIEW V_GOODS(
    IDX,
    TYPEIDX,
    BARCODE,
    NAME,
    GOODCODE,
    COST,
    GOODNUMBER,
    LABELPRICE,
    LOWESTPRICE,
    LABELPRINTED,
    DESP,
    IMAGE,
	GOODTYPE)
AS
select * from t_goods union
select * from t_goods_old
;



/* View: V_SELL_LIST */
CREATE VIEW V_SELL_LIST(
    YEARS,
    MONTHS,
    TOTALCOST,
    TOTALPRICE,
    TOTALPROFIT)
AS
select extract(year from orderdate)as y, extract(month from orderdate) as m,         sum(totalcost) as tc, sum(totalprice) as tp, sum(totalprofit) as tf from t_order_list group by orderdate
;




/******************************************************************************/
/****                          Unique Constraints                          ****/
/******************************************************************************/

ALTER TABLE T_CHANGEPRICE_GOODS ADD CONSTRAINT UNQ1_T_CHANGEPRICE_GOODS UNIQUE (LISTIDX, GOODIDX);


/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE TMP_CHANGEPRICE_GOODS ADD CONSTRAINT PK_TMP_CHANGEPRICE_GOODS_1 PRIMARY KEY (IDX);
ALTER TABLE TMP_CHECK_GOODS ADD PRIMARY KEY (GOODIDX);
ALTER TABLE T_ADMIN ADD CONSTRAINT PK_T_ADMIN PRIMARY KEY (IDX);
ALTER TABLE T_AUDIT_GOODS ADD PRIMARY KEY (AUDITTIME);
ALTER TABLE T_CHANGEPRICE_GOODS ADD CONSTRAINT PK_T_CHANGEPRICE_GOODS_1 PRIMARY KEY (IDX);
ALTER TABLE T_CHANGEPRICE_LIST ADD CONSTRAINT PK_T_CHANGEPRICE_LIST_1 PRIMARY KEY (IDX);
ALTER TABLE T_CHECK_GOODS ADD CONSTRAINT PK_T_CHECK_GOODS PRIMARY KEY (IDX);
ALTER TABLE T_CHECK_LIST ADD CONSTRAINT PK_T_CHECK PRIMARY KEY (IDX);
ALTER TABLE T_CONST ADD CONSTRAINT PK_T_CONST PRIMARY KEY (IDX);
ALTER TABLE T_DUTY ADD CONSTRAINT PK_T_DUTY PRIMARY KEY (IDX);
ALTER TABLE T_GOODS ADD CONSTRAINT PK_T_GOODS PRIMARY KEY (IDX);
ALTER TABLE T_GOODS_OLD ADD CONSTRAINT PK_T_GOODS_OLD PRIMARY KEY (IDX);
ALTER TABLE T_GOODTYPE ADD CONSTRAINT PK_T_GOODTYPE PRIMARY KEY (IDX);
ALTER TABLE T_INCOMING_GOODS ADD CONSTRAINT PK_T_INCOMING PRIMARY KEY (IDX);
ALTER TABLE T_INCOMING_LIST ADD CONSTRAINT PK_T_ORDERLIST PRIMARY KEY (IDX);
ALTER TABLE T_INOUT_ITEMS ADD CONSTRAINT PK_T_INOUT_ITEMS PRIMARY KEY (IDX);
ALTER TABLE T_ORDER_GOODS ADD CONSTRAINT PK_T_ORDER PRIMARY KEY (IDX);
ALTER TABLE T_ORDER_LIST ADD CONSTRAINT PK_T_ORDER_LIST PRIMARY KEY (IDX);
ALTER TABLE T_PROVIDER ADD CONSTRAINT PK_T_PROVIDER_1 PRIMARY KEY (IDX);
ALTER TABLE T_USER ADD CONSTRAINT PK_T_USER PRIMARY KEY (IDX);


/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE T_CHECK_GOODS ADD CONSTRAINT FK_T_CHECK_CHECK FOREIGN KEY (CHECKIDX) REFERENCES T_CHECK_LIST (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE T_CHECK_GOODS ADD CONSTRAINT FK_T_CHECK_GOODS FOREIGN KEY (GOODIDX) REFERENCES T_GOODS (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE T_INCOMING_GOODS ADD CONSTRAINT FK_T_INCOMING_GOODS FOREIGN KEY (GOODIDX) REFERENCES T_GOODS (IDX) ON UPDATE CASCADE;
ALTER TABLE T_INCOMING_GOODS ADD CONSTRAINT FK_T_INCOMING_LIST FOREIGN KEY (LISTIDX) REFERENCES T_INCOMING_LIST (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE T_INOUT_ITEMS ADD CONSTRAINT FK_INOUTITEM_ORDERLIST FOREIGN KEY (ORDERLISTIDX) REFERENCES T_ORDER_LIST (IDX) ON UPDATE CASCADE;
ALTER TABLE T_ORDER_GOODS ADD CONSTRAINT FK_T_ORDER_GOODS FOREIGN KEY (GOODIDX) REFERENCES T_GOODS (IDX) ON DELETE SET DEFAULT ON UPDATE CASCADE;
ALTER TABLE T_ORDER_GOODS ADD CONSTRAINT FK_T_ORDER_ORDERLIST FOREIGN KEY (ORDERLISTIDX) REFERENCES T_ORDER_LIST (IDX);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE UNIQUE INDEX IDX_BARCODE ON T_GOODS (BARCODE);
CREATE INDEX IDX_GOOD_TYPE_PID ON T_GOODTYPE (PID);
CREATE INDEX IDX_CANCELTIME ON T_ORDER_GOODS (CANCELDATE);
CREATE INDEX IDX_SELLTIME ON T_ORDER_GOODS (SELLTIME);
CREATE UNIQUE INDEX IDX_ORDER_DATE ON T_ORDER_LIST (ORDERDATE);
CREATE UNIQUE INDEX IDX_T_SERIAL ON T_USER (SERIAL);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: T_ADMIN_AUTOID */
CREATE TRIGGER T_ADMIN_AUTOID FOR T_ADMIN
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_admin_gen, 1 );
end
^


/* Trigger: T_CHANGEPRICE_GOODS_AUTOID */
CREATE TRIGGER T_CHANGEPRICE_GOODS_AUTOID FOR T_CHANGEPRICE_GOODS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_changeprice_goods_gen, 1 );
end
^


/* Trigger: T_CHANGEPRICE_LIST_AUTOID */
CREATE TRIGGER T_CHANGEPRICE_LIST_AUTOID FOR T_CHANGEPRICE_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_changeprice_list_gen, 1 );
end
^


/* Trigger: T_CHECK_GOODS_AUTOID */
CREATE TRIGGER T_CHECK_GOODS_AUTOID FOR T_CHECK_GOODS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_check_goods_gen, 1 );
end
^


/* Trigger: T_CHECK_LIST_AUTOID */
CREATE TRIGGER T_CHECK_LIST_AUTOID FOR T_CHECK_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_check_list_gen, 1 );
end
^


/* Trigger: T_DUTY_AUTOID */
CREATE TRIGGER T_DUTY_AUTOID FOR T_DUTY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_duty_gen, 1 );
end
^


/* Trigger: T_GOODS_AUTOID */
CREATE TRIGGER T_GOODS_AUTOID FOR T_GOODS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_goods_gen, 1 );
end
^


/* Trigger: T_GOODTYPE_AUTOID */
CREATE TRIGGER T_GOODTYPE_AUTOID FOR T_GOODTYPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_goodtype_gen, 1 );
end
^


/* Trigger: T_INCOMING_GOODS_AUTOID */
CREATE TRIGGER T_INCOMING_GOODS_AUTOID FOR T_INCOMING_GOODS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_incoming_goods_gen, 1 );
end
^


/* Trigger: T_INCOMING_LIST_AUTOID */
CREATE TRIGGER T_INCOMING_LIST_AUTOID FOR T_INCOMING_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_incoming_list_gen, 1 );
end
^


/* Trigger: T_INOUT_ITEMS_AUTOID */
CREATE TRIGGER T_INOUT_ITEMS_AUTOID FOR T_INOUT_ITEMS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_inout_items_gen, 1 );
end
^


/* Trigger: T_ORDER_GOODS_AUTOID */
CREATE TRIGGER T_ORDER_GOODS_AUTOID FOR T_ORDER_GOODS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_order_goods_gen, 1 );
end
^


/* Trigger: T_ORDER_LIST_AUTOID */
CREATE TRIGGER T_ORDER_LIST_AUTOID FOR T_ORDER_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_order_list_gen, 1 );
end
^


/* Trigger: T_PROVIDER_AUTOID */
CREATE TRIGGER T_PROVIDER_AUTOID FOR T_PROVIDER
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_admin_gen, 1 );
end
^


/* Trigger: T_USER_AUTOID */
CREATE TRIGGER T_USER_AUTOID FOR T_USER
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Auto increase index field: idx */
  if (new.idx is null) then
    new.idx = gen_id( t_user_gen, 1 );
end
^


SET TERM ; ^



/* Fields descriptions */

DESCRIBE FIELD TOTALCHANGE TABLE T_ORDER_LIST
'当天持有零钱和';

DESCRIBE FIELD TOTALCASH TABLE T_ORDER_LIST
'当天持有现金和';

DESCRIBE FIELD TOTALCOST TABLE T_ORDER_LIST
'当天成本和';

DESCRIBE FIELD TOTALPRICE TABLE T_ORDER_LIST
'当天销售额';

DESCRIBE FIELD TOTALPROFIT TABLE T_ORDER_LIST
'当天利润和';

DESCRIBE FIELD TOTALSELLNUM TABLE T_ORDER_LIST
'当天销售量';

DESCRIBE FIELD TOTALCANCELNUM TABLE T_ORDER_LIST
'当天退货量';
